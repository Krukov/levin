<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="390" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="373.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="373.00"> </text><g id="frames"><g><title>_call_set_state (asyncio/futures.py:356) (1 samples, 1.00%)</title><rect x="10" y="116" width="11" height="15" fill="rgb(222,193,3)"/><text x="13.00" y="126.50"></text></g><g><title>cancelled (concurrent/futures/_base.py:370) (1 samples, 1.00%)</title><rect x="10" y="132" width="11" height="15" fill="rgb(253,135,10)"/><text x="13.00" y="142.50"></text></g><g><title>__exit__ (threading.py:244) (1 samples, 1.00%)</title><rect x="10" y="148" width="11" height="15" fill="rgb(206,104,22)"/><text x="13.00" y="158.50"></text></g><g><title>parse_frame_header (hyperframe/frame.py:116) (1 samples, 1.00%)</title><rect x="33" y="212" width="12" height="15" fill="rgb(210,5,52)"/><text x="36.00" y="222.50"></text></g><g><title>next (h2/frame_buffer.py:140) (3 samples, 3.00%)</title><rect x="33" y="180" width="36" height="15" fill="rgb(249,123,39)"/><text x="36.00" y="190.50">nex..</text></g><g><title>_parse_frame_header (h2/frame_buffer.py:67) (3 samples, 3.00%)</title><rect x="33" y="196" width="36" height="15" fill="rgb(228,73,33)"/><text x="36.00" y="206.50">_pa..</text></g><g><title>parse_frame_header (hyperframe/frame.py:119) (2 samples, 2.00%)</title><rect x="45" y="212" width="24" height="15" fill="rgb(219,216,53)"/><text x="48.00" y="222.50">p..</text></g><g><title>__init__ (hyperframe/frame.py:638) (2 samples, 2.00%)</title><rect x="45" y="228" width="24" height="15" fill="rgb(229,60,39)"/><text x="48.00" y="238.50">_..</text></g><g><title>__init__ (hyperframe/frame.py:184) (2 samples, 2.00%)</title><rect x="45" y="244" width="24" height="15" fill="rgb(228,119,22)"/><text x="48.00" y="254.50">_..</text></g><g><title>__init__ (hyperframe/frame.py:219) (2 samples, 2.00%)</title><rect x="45" y="260" width="24" height="15" fill="rgb(224,67,52)"/><text x="48.00" y="270.50">_..</text></g><g><title>__init__ (hyperframe/frame.py:61) (2 samples, 2.00%)</title><rect x="45" y="276" width="24" height="15" fill="rgb(223,207,33)"/><text x="48.00" y="286.50">_..</text></g><g><title>__init__ (hyperframe/flags.py:28) (2 samples, 2.00%)</title><rect x="45" y="292" width="24" height="15" fill="rgb(249,95,4)"/><text x="48.00" y="302.50">_..</text></g><g><title>&lt;genexpr&gt; (hyperframe/flags.py:28) (1 samples, 1.00%)</title><rect x="57" y="308" width="12" height="15" fill="rgb(213,4,10)"/><text x="60.00" y="318.50"></text></g><g><title>next (h2/frame_buffer.py:150) (1 samples, 1.00%)</title><rect x="69" y="180" width="11" height="15" fill="rgb(241,16,40)"/><text x="72.00" y="190.50"></text></g><g><title>_validate_frame_length (h2/frame_buffer.py:81) (1 samples, 1.00%)</title><rect x="69" y="196" width="11" height="15" fill="rgb(254,16,44)"/><text x="72.00" y="206.50"></text></g><g><title>parse_body (hyperframe/frame.py:663) (1 samples, 1.00%)</title><rect x="104" y="196" width="12" height="15" fill="rgb(236,63,13)"/><text x="107.00" y="206.50"></text></g><g><title>receive_data (h2/connection.py:1462) (8 samples, 8.00%)</title><rect x="33" y="148" width="95" height="15" fill="rgb(243,94,14)"/><text x="36.00" y="158.50">receive_dat..</text></g><g><title>__next__ (h2/frame_buffer.py:175) (8 samples, 8.00%)</title><rect x="33" y="164" width="95" height="15" fill="rgb(225,174,47)"/><text x="36.00" y="174.50">__next__ (h..</text></g><g><title>next (h2/frame_buffer.py:156) (4 samples, 4.00%)</title><rect x="80" y="180" width="48" height="15" fill="rgb(209,21,12)"/><text x="83.00" y="190.50">next..</text></g><g><title>parse_body (hyperframe/frame.py:665) (1 samples, 1.00%)</title><rect x="116" y="196" width="12" height="15" fill="rgb(239,217,2)"/><text x="119.00" y="206.50"></text></g><g><title>_receive_headers_frame (h2/connection.py:1542) (1 samples, 1.00%)</title><rect x="139" y="180" width="12" height="15" fill="rgb(231,31,37)"/><text x="142.00" y="190.50"></text></g><g><title>max_concurrent_streams (h2/settings.py:236) (1 samples, 1.00%)</title><rect x="139" y="196" width="12" height="15" fill="rgb(239,1,19)"/><text x="142.00" y="206.50"></text></g><g><title>_receive_headers_frame (h2/connection.py:1543) (1 samples, 1.00%)</title><rect x="151" y="180" width="12" height="15" fill="rgb(246,44,30)"/><text x="154.00" y="190.50"></text></g><g><title>open_inbound_streams (h2/connection.py:427) (1 samples, 1.00%)</title><rect x="151" y="196" width="12" height="15" fill="rgb(217,149,41)"/><text x="154.00" y="206.50"></text></g><g><title>_open_streams (h2/connection.py:403) (1 samples, 1.00%)</title><rect x="151" y="212" width="12" height="15" fill="rgb(212,147,9)"/><text x="154.00" y="222.50"></text></g><g><title>decode (hpack/hpack.py:460) (1 samples, 1.00%)</title><rect x="163" y="212" width="12" height="15" fill="rgb(237,194,21)"/><text x="166.00" y="222.50"></text></g><g><title>decode (hpack/hpack.py:465) (1 samples, 1.00%)</title><rect x="175" y="212" width="12" height="15" fill="rgb(242,134,32)"/><text x="178.00" y="222.50"></text></g><g><title>_decode_indexed (hpack/hpack.py:546) (1 samples, 1.00%)</title><rect x="187" y="228" width="11" height="15" fill="rgb(220,137,28)"/><text x="190.00" y="238.50"></text></g><g><title>get_by_index (hpack/table.py:129) (1 samples, 1.00%)</title><rect x="210" y="244" width="12" height="15" fill="rgb(212,185,27)"/><text x="213.00" y="254.50"></text></g><g><title>decode (hpack/hpack.py:473) (4 samples, 4.00%)</title><rect x="187" y="212" width="47" height="15" fill="rgb(217,181,50)"/><text x="190.00" y="222.50">deco..</text></g><g><title>_decode_indexed (hpack/hpack.py:547) (3 samples, 3.00%)</title><rect x="198" y="228" width="36" height="15" fill="rgb(230,18,18)"/><text x="201.00" y="238.50">_de..</text></g><g><title>get_by_index (hpack/table.py:134) (1 samples, 1.00%)</title><rect x="222" y="244" width="12" height="15" fill="rgb(233,1,9)"/><text x="225.00" y="254.50"></text></g><g><title>decode (hpack/hpack.py:494) (1 samples, 1.00%)</title><rect x="234" y="212" width="12" height="15" fill="rgb(223,65,45)"/><text x="237.00" y="222.50"></text></g><g><title>_decode_literal_no_index (hpack/hpack.py:552) (1 samples, 1.00%)</title><rect x="234" y="228" width="12" height="15" fill="rgb(249,96,36)"/><text x="237.00" y="238.50"></text></g><g><title>_decode_literal (hpack/hpack.py:579) (1 samples, 1.00%)</title><rect x="234" y="244" width="12" height="15" fill="rgb(209,203,5)"/><text x="237.00" y="254.50"></text></g><g><title>decode_integer (hpack/hpack.py:106) (1 samples, 1.00%)</title><rect x="234" y="260" width="12" height="15" fill="rgb(250,132,2)"/><text x="237.00" y="270.50"></text></g><g><title>decode (hpack/hpack.py:498) (1 samples, 1.00%)</title><rect x="246" y="212" width="11" height="15" fill="rgb(216,9,33)"/><text x="249.00" y="222.50"></text></g><g><title>decode (hpack/hpack.py:499) (1 samples, 1.00%)</title><rect x="257" y="212" width="12" height="15" fill="rgb(244,86,32)"/><text x="260.00" y="222.50"></text></g><g><title>table_entry_size (hpack/table.py:23) (1 samples, 1.00%)</title><rect x="257" y="228" width="12" height="15" fill="rgb(225,194,23)"/><text x="260.00" y="238.50"></text></g><g><title>decode (hpack/hpack.py:501) (1 samples, 1.00%)</title><rect x="269" y="212" width="12" height="15" fill="rgb(206,75,31)"/><text x="272.00" y="222.50"></text></g><g><title>_receive_headers_frame (h2/connection.py:1552) (11 samples, 11.00%)</title><rect x="163" y="180" width="130" height="15" fill="rgb(238,118,27)"/><text x="166.00" y="190.50">_receive_headers..</text></g><g><title>_decode_headers (h2/connection.py:2002) (11 samples, 11.00%)</title><rect x="163" y="196" width="130" height="15" fill="rgb(211,131,44)"/><text x="166.00" y="206.50">_decode_headers ..</text></g><g><title>decode (hpack/hpack.py:515) (1 samples, 1.00%)</title><rect x="281" y="212" width="12" height="15" fill="rgb(219,39,45)"/><text x="284.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (hpack/hpack.py:515) (1 samples, 1.00%)</title><rect x="281" y="228" width="12" height="15" fill="rgb(252,34,23)"/><text x="284.00" y="238.50"></text></g><g><title>_unicode_if_needed (hpack/hpack.py:50) (1 samples, 1.00%)</title><rect x="281" y="244" width="12" height="15" fill="rgb(231,61,25)"/><text x="284.00" y="254.50"></text></g><g><title>to_bytes (hpack/compat.py:39) (1 samples, 1.00%)</title><rect x="281" y="260" width="12" height="15" fill="rgb(240,65,25)"/><text x="284.00" y="270.50"></text></g><g><title>_receive_headers_frame (h2/connection.py:1555) (2 samples, 2.00%)</title><rect x="293" y="180" width="23" height="15" fill="rgb(211,84,35)"/><text x="296.00" y="190.50">_..</text></g><g><title>_begin_new_stream (h2/connection.py:450) (1 samples, 1.00%)</title><rect x="328" y="212" width="12" height="15" fill="rgb(216,196,48)"/><text x="331.00" y="222.50"></text></g><g><title>_receive_headers_frame (h2/connection.py:1558) (3 samples, 3.00%)</title><rect x="316" y="180" width="36" height="15" fill="rgb(229,130,47)"/><text x="319.00" y="190.50">_re..</text></g><g><title>_get_or_create_stream (h2/connection.py:592) (3 samples, 3.00%)</title><rect x="316" y="196" width="36" height="15" fill="rgb(216,66,49)"/><text x="319.00" y="206.50">_ge..</text></g><g><title>_begin_new_stream (h2/connection.py:470) (1 samples, 1.00%)</title><rect x="340" y="212" width="12" height="15" fill="rgb(249,76,35)"/><text x="343.00" y="222.50"></text></g><g><title>__init__ (h2/stream.py:767) (1 samples, 1.00%)</title><rect x="340" y="228" width="12" height="15" fill="rgb(207,150,27)"/><text x="343.00" y="238.50"></text></g><g><title>is_informational_response (h2/utilities.py:121) (1 samples, 1.00%)</title><rect x="352" y="212" width="12" height="15" fill="rgb(250,31,53)"/><text x="355.00" y="222.50"></text></g><g><title>is_informational_response (h2/utilities.py:132) (1 samples, 1.00%)</title><rect x="364" y="212" width="11" height="15" fill="rgb(209,136,6)"/><text x="367.00" y="222.50"></text></g><g><title>receive_headers (h2/stream.py:1030) (3 samples, 3.00%)</title><rect x="352" y="196" width="35" height="15" fill="rgb(242,138,28)"/><text x="355.00" y="206.50">re..</text></g><g><title>is_informational_response (h2/utilities.py:135) (1 samples, 1.00%)</title><rect x="375" y="212" width="12" height="15" fill="rgb(239,142,18)"/><text x="378.00" y="222.50"></text></g><g><title>receive_headers (h2/stream.py:1048) (1 samples, 1.00%)</title><rect x="387" y="196" width="12" height="15" fill="rgb(231,88,6)"/><text x="390.00" y="206.50"></text></g><g><title>_initialize_content_length (h2/stream.py:1310) (1 samples, 1.00%)</title><rect x="387" y="212" width="12" height="15" fill="rgb(252,24,20)"/><text x="390.00" y="222.50"></text></g><g><title>_build_hdr_validation_flags (h2/stream.py:1212) (1 samples, 1.00%)</title><rect x="399" y="212" width="12" height="15" fill="rgb(228,168,33)"/><text x="402.00" y="222.50"></text></g><g><title>receive_headers (h2/stream.py:1054) (2 samples, 2.00%)</title><rect x="399" y="196" width="24" height="15" fill="rgb(245,28,20)"/><text x="402.00" y="206.50">r..</text></g><g><title>_build_hdr_validation_flags (h2/stream.py:1230) (1 samples, 1.00%)</title><rect x="411" y="212" width="12" height="15" fill="rgb(224,86,20)"/><text x="414.00" y="222.50"></text></g><g><title>__new__ (&lt;string&gt;:1) (1 samples, 1.00%)</title><rect x="411" y="228" width="12" height="15" fill="rgb(231,156,43)"/><text x="414.00" y="238.50"></text></g><g><title>_process_received_headers (h2/stream.py:1291) (1 samples, 1.00%)</title><rect x="423" y="212" width="11" height="15" fill="rgb(209,63,17)"/><text x="426.00" y="222.50"></text></g><g><title>validate_headers (h2/utilities.py:231) (1 samples, 1.00%)</title><rect x="423" y="228" width="11" height="15" fill="rgb(214,118,29)"/><text x="426.00" y="238.50"></text></g><g><title>_check_path_header (h2/utilities.py:513) (1 samples, 1.00%)</title><rect x="423" y="244" width="11" height="15" fill="rgb(253,71,16)"/><text x="426.00" y="254.50"></text></g><g><title>_reject_uppercase_header_fields (h2/utilities.py:242) (1 samples, 1.00%)</title><rect x="434" y="340" width="12" height="15" fill="rgb(241,109,35)"/><text x="437.00" y="350.50"></text></g><g><title>_reject_te (h2/utilities.py:275) (2 samples, 2.00%)</title><rect x="434" y="308" width="24" height="15" fill="rgb(221,126,4)"/><text x="437.00" y="318.50">_..</text></g><g><title>_reject_surrounding_whitespace (h2/utilities.py:258) (2 samples, 2.00%)</title><rect x="434" y="324" width="24" height="15" fill="rgb(207,112,49)"/><text x="437.00" y="334.50">_..</text></g><g><title>_reject_uppercase_header_fields (h2/utilities.py:245) (1 samples, 1.00%)</title><rect x="446" y="340" width="12" height="15" fill="rgb(223,66,32)"/><text x="449.00" y="350.50"></text></g><g><title>_reject_connection_header (h2/utilities.py:291) (3 samples, 3.00%)</title><rect x="434" y="292" width="36" height="15" fill="rgb(227,123,6)"/><text x="437.00" y="302.50">_re..</text></g><g><title>_reject_te (h2/utilities.py:276) (1 samples, 1.00%)</title><rect x="458" y="308" width="12" height="15" fill="rgb(215,132,38)"/><text x="461.00" y="318.50"></text></g><g><title>_reject_pseudo_header_fields (h2/utilities.py:335) (4 samples, 4.00%)</title><rect x="434" y="276" width="48" height="15" fill="rgb(235,128,43)"/><text x="437.00" y="286.50">_rej..</text></g><g><title>_reject_connection_header (h2/utilities.py:292) (1 samples, 1.00%)</title><rect x="470" y="292" width="12" height="15" fill="rgb(239,195,34)"/><text x="473.00" y="302.50"></text></g><g><title>_custom_startswith (h2/utilities.py:305) (1 samples, 1.00%)</title><rect x="482" y="292" width="11" height="15" fill="rgb(234,170,17)"/><text x="485.00" y="302.50"></text></g><g><title>_reject_pseudo_header_fields (h2/utilities.py:336) (2 samples, 2.00%)</title><rect x="482" y="276" width="23" height="15" fill="rgb(221,210,17)"/><text x="485.00" y="286.50">_..</text></g><g><title>_custom_startswith (h2/utilities.py:306) (1 samples, 1.00%)</title><rect x="493" y="292" width="12" height="15" fill="rgb(235,44,47)"/><text x="496.00" y="302.50"></text></g><g><title>_reject_pseudo_header_fields (h2/utilities.py:337) (1 samples, 1.00%)</title><rect x="505" y="276" width="12" height="15" fill="rgb(207,1,23)"/><text x="508.00" y="286.50"></text></g><g><title>_check_pseudo_header_field_acceptability (h2/utilities.py:380) (1 samples, 1.00%)</title><rect x="517" y="292" width="12" height="15" fill="rgb(227,55,37)"/><text x="520.00" y="302.50"></text></g><g><title>_decode_headers (h2/stream.py:1361) (9 samples, 9.00%)</title><rect x="434" y="228" width="107" height="15" fill="rgb(210,133,11)"/><text x="437.00" y="238.50">_decode_heade..</text></g><g><title>inner (h2/utilities.py:496) (9 samples, 9.00%)</title><rect x="434" y="244" width="107" height="15" fill="rgb(224,19,40)"/><text x="437.00" y="254.50">inner (h2/uti..</text></g><g><title>_validate_host_authority_header (h2/utilities.py:441) (9 samples, 9.00%)</title><rect x="434" y="260" width="107" height="15" fill="rgb(226,65,46)"/><text x="437.00" y="270.50">_validate_hos..</text></g><g><title>_reject_pseudo_header_fields (h2/utilities.py:368) (2 samples, 2.00%)</title><rect x="517" y="276" width="24" height="15" fill="rgb(221,68,28)"/><text x="520.00" y="286.50">_..</text></g><g><title>_check_pseudo_header_field_acceptability (h2/utilities.py:403) (1 samples, 1.00%)</title><rect x="529" y="292" width="12" height="15" fill="rgb(210,99,41)"/><text x="532.00" y="302.50"></text></g><g><title>_assert_header_in_set (h2/utilities.py:317) (1 samples, 1.00%)</title><rect x="529" y="308" width="12" height="15" fill="rgb(254,23,15)"/><text x="532.00" y="318.50"></text></g><g><title>_receive_frame (h2/connection.py:1486) (36 samples, 36.00%)</title><rect x="128" y="164" width="424" height="15" fill="rgb(217,35,30)"/><text x="131.00" y="174.50">_receive_frame (h2/connection.py:1486)</text></g><g><title>_receive_headers_frame (h2/connection.py:1563) (17 samples, 17.00%)</title><rect x="352" y="180" width="200" height="15" fill="rgb(245,25,8)"/><text x="355.00" y="190.50">_receive_headers_frame (h2..</text></g><g><title>receive_headers (h2/stream.py:1056) (11 samples, 11.00%)</title><rect x="423" y="196" width="129" height="15" fill="rgb(227,167,2)"/><text x="426.00" y="206.50">receive_headers ..</text></g><g><title>_process_received_headers (h2/stream.py:1298) (10 samples, 10.00%)</title><rect x="434" y="212" width="118" height="15" fill="rgb(207,37,38)"/><text x="437.00" y="222.50">_process_recei..</text></g><g><title>_decode_headers (h2/stream.py:1369) (1 samples, 1.00%)</title><rect x="541" y="228" width="11" height="15" fill="rgb(214,86,1)"/><text x="544.00" y="238.50"></text></g><g><title>handle_request (levin/parsers/hyper.py:43) (45 samples, 45.00%)</title><rect x="33" y="132" width="531" height="15" fill="rgb(251,32,17)"/><text x="36.00" y="142.50">handle_request (levin/parsers/hyper.py:43)</text></g><g><title>receive_data (h2/connection.py:1463) (37 samples, 37.00%)</title><rect x="128" y="148" width="436" height="15" fill="rgb(217,31,38)"/><text x="131.00" y="158.50">receive_data (h2/connection.py:1463)</text></g><g><title>_receive_frame (h2/connection.py:1520) (1 samples, 1.00%)</title><rect x="552" y="164" width="12" height="15" fill="rgb(229,198,41)"/><text x="555.00" y="174.50"></text></g><g><title>_prepare_for_sending (h2/connection.py:388) (1 samples, 1.00%)</title><rect x="552" y="180" width="12" height="15" fill="rgb(206,133,6)"/><text x="555.00" y="190.50"></text></g><g><title>handle_request (levin/parsers/hyper.py:49) (1 samples, 1.00%)</title><rect x="564" y="132" width="12" height="15" fill="rgb(228,81,28)"/><text x="567.00" y="142.50"></text></g><g><title>_get_request_from_event (levin/parsers/hyper.py:16) (1 samples, 1.00%)</title><rect x="576" y="148" width="12" height="15" fill="rgb(211,181,44)"/><text x="579.00" y="158.50"></text></g><g><title>_get_request_from_event (levin/parsers/hyper.py:17) (1 samples, 1.00%)</title><rect x="588" y="148" width="12" height="15" fill="rgb(209,141,36)"/><text x="591.00" y="158.50"></text></g><g><title>_data_received (levin/connection.py:39) (50 samples, 50.00%)</title><rect x="21" y="116" width="590" height="15" fill="rgb(213,97,32)"/><text x="24.00" y="126.50">_data_received (levin/connection.py:39)</text></g><g><title>handle_request (levin/parsers/hyper.py:50) (3 samples, 3.00%)</title><rect x="576" y="132" width="35" height="15" fill="rgb(253,222,46)"/><text x="579.00" y="142.50">ha..</text></g><g><title>_get_request_from_event (levin/parsers/hyper.py:24) (1 samples, 1.00%)</title><rect x="600" y="148" width="11" height="15" fill="rgb(250,199,31)"/><text x="603.00" y="158.50"></text></g><g><title>handle (levin/app.py:23) (3 samples, 3.00%)</title><rect x="623" y="148" width="36" height="15" fill="rgb(231,175,26)"/><text x="626.00" y="158.50">han..</text></g><g><title>resolve (levin/router.py:67) (3 samples, 3.00%)</title><rect x="623" y="164" width="36" height="15" fill="rgb(222,69,5)"/><text x="626.00" y="174.50">res..</text></g><g><title>&lt;listcomp&gt; (levin/router.py:67) (3 samples, 3.00%)</title><rect x="623" y="180" width="36" height="15" fill="rgb(238,176,33)"/><text x="626.00" y="190.50">&lt;li..</text></g><g><title>__call__ (levin/router.py:51) (2 samples, 2.00%)</title><rect x="635" y="196" width="24" height="15" fill="rgb(247,79,10)"/><text x="638.00" y="206.50">_..</text></g><g><title>slash_append (levin/router.py:56) (1 samples, 1.00%)</title><rect x="647" y="212" width="12" height="15" fill="rgb(235,57,17)"/><text x="650.00" y="222.50"></text></g><g><title>middleware (levin/middlewares.py:10) (1 samples, 1.00%)</title><rect x="659" y="164" width="11" height="15" fill="rgb(209,218,39)"/><text x="662.00" y="174.50"></text></g><g><title>dumps (json/__init__.py:231) (1 samples, 1.00%)</title><rect x="659" y="180" width="11" height="15" fill="rgb(209,128,52)"/><text x="662.00" y="190.50"></text></g><g><title>encode (json/encoder.py:199) (1 samples, 1.00%)</title><rect x="659" y="196" width="11" height="15" fill="rgb(240,194,17)"/><text x="662.00" y="206.50"></text></g><g><title>iterencode (json/encoder.py:250) (1 samples, 1.00%)</title><rect x="659" y="212" width="11" height="15" fill="rgb(243,81,18)"/><text x="662.00" y="222.50"></text></g><g><title>middleware (levin/middlewares.py:11) (1 samples, 1.00%)</title><rect x="670" y="164" width="12" height="15" fill="rgb(248,170,36)"/><text x="673.00" y="174.50"></text></g><g><title>handle_request (levin/connection.py:50) (6 samples, 6.00%)</title><rect x="623" y="132" width="71" height="15" fill="rgb(213,123,17)"/><text x="626.00" y="142.50">handle_r..</text></g><g><title>handle (levin/app.py:26) (3 samples, 3.00%)</title><rect x="659" y="148" width="35" height="15" fill="rgb(212,84,53)"/><text x="662.00" y="158.50">ha..</text></g><g><title>middleware (levin/middlewares.py:8) (1 samples, 1.00%)</title><rect x="682" y="164" width="12" height="15" fill="rgb(229,227,31)"/><text x="685.00" y="174.50"></text></g><g><title>send_headers (h2/connection.py:754) (1 samples, 1.00%)</title><rect x="694" y="164" width="12" height="15" fill="rgb(225,58,34)"/><text x="697.00" y="174.50"></text></g><g><title>__get__ (h2/config.py:20) (1 samples, 1.00%)</title><rect x="718" y="180" width="11" height="15" fill="rgb(206,109,15)"/><text x="721.00" y="190.50"></text></g><g><title>send_headers (h2/connection.py:768) (3 samples, 3.00%)</title><rect x="706" y="164" width="35" height="15" fill="rgb(211,225,23)"/><text x="709.00" y="174.50">se..</text></g><g><title>_get_or_create_stream (h2/connection.py:590) (1 samples, 1.00%)</title><rect x="729" y="180" width="12" height="15" fill="rgb(225,8,35)"/><text x="732.00" y="190.50"></text></g><g><title>send_headers (h2/stream.py:853) (1 samples, 1.00%)</title><rect x="741" y="180" width="12" height="15" fill="rgb(223,88,50)"/><text x="744.00" y="190.50"></text></g><g><title>is_informational_response (h2/utilities.py:121) (1 samples, 1.00%)</title><rect x="741" y="196" width="12" height="15" fill="rgb(210,145,49)"/><text x="744.00" y="206.50"></text></g><g><title>send_headers (h2/stream.py:861) (1 samples, 1.00%)</title><rect x="753" y="180" width="12" height="15" fill="rgb(254,148,48)"/><text x="756.00" y="190.50"></text></g><g><title>process_input (h2/stream.py:117) (1 samples, 1.00%)</title><rect x="753" y="196" width="12" height="15" fill="rgb(242,151,15)"/><text x="756.00" y="206.50"></text></g><g><title>__hash__ (enum.py:608) (1 samples, 1.00%)</title><rect x="753" y="212" width="12" height="15" fill="rgb(206,113,45)"/><text x="756.00" y="222.50"></text></g><g><title>_build_headers_frames (h2/stream.py:1247) (1 samples, 1.00%)</title><rect x="765" y="196" width="12" height="15" fill="rgb(240,57,54)"/><text x="768.00" y="206.50"></text></g><g><title>__get__ (h2/config.py:20) (1 samples, 1.00%)</title><rect x="765" y="212" width="12" height="15" fill="rgb(253,145,50)"/><text x="768.00" y="222.50"></text></g><g><title>encode (hpack/hpack.py:244) (1 samples, 1.00%)</title><rect x="788" y="212" width="12" height="15" fill="rgb(205,196,10)"/><text x="791.00" y="222.50"></text></g><g><title>_reject_te (h2/utilities.py:275) (1 samples, 1.00%)</title><rect x="800" y="260" width="12" height="15" fill="rgb(227,84,18)"/><text x="803.00" y="270.50"></text></g><g><title>_secure_headers (h2/utilities.py:88) (1 samples, 1.00%)</title><rect x="800" y="276" width="12" height="15" fill="rgb(217,88,50)"/><text x="803.00" y="286.50"></text></g><g><title>_strip_connection_headers (h2/utilities.py:547) (1 samples, 1.00%)</title><rect x="800" y="292" width="12" height="15" fill="rgb(205,212,8)"/><text x="803.00" y="302.50"></text></g><g><title>_strip_surrounding_whitespace (h2/utilities.py:536) (1 samples, 1.00%)</title><rect x="800" y="308" width="12" height="15" fill="rgb(251,197,7)"/><text x="803.00" y="318.50"></text></g><g><title>_lowercase_header_names (h2/utilities.py:526) (1 samples, 1.00%)</title><rect x="800" y="324" width="12" height="15" fill="rgb(227,181,39)"/><text x="803.00" y="334.50"></text></g><g><title>_reject_pseudo_header_fields (h2/utilities.py:335) (2 samples, 2.00%)</title><rect x="800" y="228" width="24" height="15" fill="rgb(208,204,35)"/><text x="803.00" y="238.50">_..</text></g><g><title>_reject_connection_header (h2/utilities.py:291) (2 samples, 2.00%)</title><rect x="800" y="244" width="24" height="15" fill="rgb(237,168,2)"/><text x="803.00" y="254.50">_..</text></g><g><title>_reject_te (h2/utilities.py:276) (1 samples, 1.00%)</title><rect x="812" y="260" width="12" height="15" fill="rgb(228,162,19)"/><text x="815.00" y="270.50"></text></g><g><title>_reject_pseudo_header_fields (h2/utilities.py:336) (1 samples, 1.00%)</title><rect x="824" y="228" width="12" height="15" fill="rgb(224,46,24)"/><text x="827.00" y="238.50"></text></g><g><title>_custom_startswith (h2/utilities.py:305) (1 samples, 1.00%)</title><rect x="824" y="244" width="12" height="15" fill="rgb(208,100,52)"/><text x="827.00" y="254.50"></text></g><g><title>encode (hpack/hpack.py:249) (4 samples, 4.00%)</title><rect x="800" y="212" width="47" height="15" fill="rgb(207,161,45)"/><text x="803.00" y="222.50">enco..</text></g><g><title>_reject_pseudo_header_fields (h2/utilities.py:368) (1 samples, 1.00%)</title><rect x="836" y="228" width="11" height="15" fill="rgb(214,225,49)"/><text x="839.00" y="238.50"></text></g><g><title>_check_pseudo_header_field_acceptability (h2/utilities.py:392) (1 samples, 1.00%)</title><rect x="836" y="244" width="11" height="15" fill="rgb(251,155,35)"/><text x="839.00" y="254.50"></text></g><g><title>encode (hpack/hpack.py:251) (2 samples, 2.00%)</title><rect x="847" y="212" width="24" height="15" fill="rgb(215,166,17)"/><text x="850.00" y="222.50">e..</text></g><g><title>add (hpack/hpack.py:269) (1 samples, 1.00%)</title><rect x="871" y="228" width="12" height="15" fill="rgb(238,16,37)"/><text x="874.00" y="238.50"></text></g><g><title>add (hpack/hpack.py:274) (1 samples, 1.00%)</title><rect x="883" y="228" width="12" height="15" fill="rgb(225,216,50)"/><text x="886.00" y="238.50"></text></g><g><title>search (hpack/table.py:175) (4 samples, 4.00%)</title><rect x="895" y="244" width="47" height="15" fill="rgb(230,88,41)"/><text x="898.00" y="254.50">sear..</text></g><g><title>add (hpack/hpack.py:277) (5 samples, 5.00%)</title><rect x="895" y="228" width="59" height="15" fill="rgb(209,191,15)"/><text x="898.00" y="238.50">add (h..</text></g><g><title>search (hpack/table.py:177) (1 samples, 1.00%)</title><rect x="942" y="244" width="12" height="15" fill="rgb(221,68,23)"/><text x="945.00" y="254.50"></text></g><g><title>_build_headers_frames (h2/stream.py:1252) (16 samples, 16.00%)</title><rect x="777" y="196" width="188" height="15" fill="rgb(219,119,12)"/><text x="780.00" y="206.50">_build_headers_frames (h..</text></g><g><title>encode (hpack/hpack.py:257) (8 samples, 8.00%)</title><rect x="871" y="212" width="94" height="15" fill="rgb(221,39,23)"/><text x="874.00" y="222.50">encode (hpa..</text></g><g><title>add (hpack/hpack.py:294) (1 samples, 1.00%)</title><rect x="954" y="228" width="11" height="15" fill="rgb(226,153,36)"/><text x="957.00" y="238.50"></text></g><g><title>_encode_indexed (hpack/hpack.py:313) (1 samples, 1.00%)</title><rect x="954" y="244" width="11" height="15" fill="rgb(219,214,46)"/><text x="957.00" y="254.50"></text></g><g><title>encode_integer (hpack/hpack.py:62) (1 samples, 1.00%)</title><rect x="954" y="260" width="11" height="15" fill="rgb(215,175,47)"/><text x="957.00" y="270.50"></text></g><g><title>send_headers (h2/connection.py:771) (20 samples, 20.00%)</title><rect x="741" y="164" width="236" height="15" fill="rgb(244,209,17)"/><text x="744.00" y="174.50">send_headers (h2/connection.py:..</text></g><g><title>send_headers (h2/stream.py:866) (18 samples, 18.00%)</title><rect x="765" y="180" width="212" height="15" fill="rgb(245,177,30)"/><text x="768.00" y="190.50">send_headers (h2/stream.py:..</text></g><g><title>_build_headers_frames (h2/stream.py:1265) (1 samples, 1.00%)</title><rect x="965" y="196" width="12" height="15" fill="rgb(247,223,19)"/><text x="968.00" y="206.50"></text></g><g><title>serialize_body (hyperframe/frame.py:645) (1 samples, 1.00%)</title><rect x="1001" y="228" width="12" height="15" fill="rgb(240,63,47)"/><text x="1004.00" y="238.50"></text></g><g><title>serialize (hyperframe/frame.py:140) (2 samples, 2.00%)</title><rect x="1001" y="212" width="23" height="15" fill="rgb(238,46,50)"/><text x="1004.00" y="222.50">s..</text></g><g><title>serialize_body (hyperframe/frame.py:647) (1 samples, 1.00%)</title><rect x="1013" y="228" width="11" height="15" fill="rgb(236,157,32)"/><text x="1016.00" y="238.50"></text></g><g><title>serialize (hyperframe/frame.py:149) (1 samples, 1.00%)</title><rect x="1024" y="212" width="12" height="15" fill="rgb(212,30,14)"/><text x="1027.00" y="222.50"></text></g><g><title>handle_response (levin/parsers/hyper.py:75) (30 samples, 30.00%)</title><rect x="694" y="148" width="354" height="15" fill="rgb(239,74,34)"/><text x="697.00" y="158.50">handle_response (levin/parsers/hyper.py:75)</text></g><g><title>send_headers (h2/connection.py:794) (6 samples, 6.00%)</title><rect x="977" y="164" width="71" height="15" fill="rgb(249,191,0)"/><text x="980.00" y="174.50">send_hea..</text></g><g><title>_prepare_for_sending (h2/connection.py:389) (6 samples, 6.00%)</title><rect x="977" y="180" width="71" height="15" fill="rgb(221,70,3)"/><text x="980.00" y="190.50">_prepare..</text></g><g><title>&lt;genexpr&gt; (h2/connection.py:389) (5 samples, 5.00%)</title><rect x="989" y="196" width="59" height="15" fill="rgb(211,8,34)"/><text x="992.00" y="206.50">&lt;genex..</text></g><g><title>serialize (hyperframe/frame.py:154) (1 samples, 1.00%)</title><rect x="1036" y="212" width="12" height="15" fill="rgb(240,71,52)"/><text x="1039.00" y="222.50"></text></g><g><title>send_data (h2/stream.py:935) (1 samples, 1.00%)</title><rect x="1072" y="180" width="11" height="15" fill="rgb(210,153,52)"/><text x="1075.00" y="190.50"></text></g><g><title>__init__ (hyperframe/frame.py:265) (1 samples, 1.00%)</title><rect x="1072" y="196" width="11" height="15" fill="rgb(213,31,38)"/><text x="1075.00" y="206.50"></text></g><g><title>__init__ (hyperframe/frame.py:184) (1 samples, 1.00%)</title><rect x="1072" y="212" width="11" height="15" fill="rgb(240,198,54)"/><text x="1075.00" y="222.50"></text></g><g><title>__init__ (hyperframe/frame.py:61) (1 samples, 1.00%)</title><rect x="1072" y="228" width="11" height="15" fill="rgb(251,132,25)"/><text x="1075.00" y="238.50"></text></g><g><title>__init__ (hyperframe/flags.py:28) (1 samples, 1.00%)</title><rect x="1072" y="244" width="11" height="15" fill="rgb(231,205,38)"/><text x="1075.00" y="254.50"></text></g><g><title>send_data (h2/stream.py:938) (1 samples, 1.00%)</title><rect x="1083" y="180" width="12" height="15" fill="rgb(216,160,1)"/><text x="1086.00" y="190.50"></text></g><g><title>process_input (h2/stream.py:129) (1 samples, 1.00%)</title><rect x="1083" y="196" width="12" height="15" fill="rgb(218,28,8)"/><text x="1086.00" y="206.50"></text></g><g><title>send_data (h2/connection.py:858) (3 samples, 3.00%)</title><rect x="1072" y="164" width="35" height="15" fill="rgb(248,198,39)"/><text x="1075.00" y="174.50">se..</text></g><g><title>send_data (h2/stream.py:939) (1 samples, 1.00%)</title><rect x="1095" y="180" width="12" height="15" fill="rgb(221,119,22)"/><text x="1098.00" y="190.50"></text></g><g><title>add (hyperframe/flags.py:50) (1 samples, 1.00%)</title><rect x="1095" y="196" width="12" height="15" fill="rgb(205,80,7)"/><text x="1098.00" y="206.50"></text></g><g><title>serialize_body (hyperframe/frame.py:271) (1 samples, 1.00%)</title><rect x="1131" y="228" width="11" height="15" fill="rgb(238,79,15)"/><text x="1134.00" y="238.50"></text></g><g><title>serialize_padding_data (hyperframe/frame.py:190) (1 samples, 1.00%)</title><rect x="1131" y="244" width="11" height="15" fill="rgb(240,78,51)"/><text x="1134.00" y="254.50"></text></g><g><title>serialize (hyperframe/frame.py:140) (3 samples, 3.00%)</title><rect x="1119" y="212" width="35" height="15" fill="rgb(219,86,41)"/><text x="1122.00" y="222.50">se..</text></g><g><title>serialize_body (hyperframe/frame.py:272) (1 samples, 1.00%)</title><rect x="1142" y="228" width="12" height="15" fill="rgb(215,164,29)"/><text x="1145.00" y="238.50"></text></g><g><title>_data_received (levin/connection.py:44) (47 samples, 47.00%)</title><rect x="611" y="116" width="555" height="15" fill="rgb(219,154,40)"/><text x="614.00" y="126.50">_data_received (levin/connection.py:44)</text></g><g><title>handle_request (levin/connection.py:53) (40 samples, 40.00%)</title><rect x="694" y="132" width="472" height="15" fill="rgb(245,98,26)"/><text x="697.00" y="142.50">handle_request (levin/connection.py:53)</text></g><g><title>handle_response (levin/parsers/hyper.py:81) (10 samples, 10.00%)</title><rect x="1048" y="148" width="118" height="15" fill="rgb(235,95,25)"/><text x="1051.00" y="158.50">handle_respons..</text></g><g><title>send_data (h2/connection.py:861) (5 samples, 5.00%)</title><rect x="1107" y="164" width="59" height="15" fill="rgb(247,188,18)"/><text x="1110.00" y="174.50">send_d..</text></g><g><title>_prepare_for_sending (h2/connection.py:389) (5 samples, 5.00%)</title><rect x="1107" y="180" width="59" height="15" fill="rgb(253,66,43)"/><text x="1110.00" y="190.50">_prepa..</text></g><g><title>&lt;genexpr&gt; (h2/connection.py:389) (4 samples, 4.00%)</title><rect x="1119" y="196" width="47" height="15" fill="rgb(212,25,33)"/><text x="1122.00" y="206.50">&lt;gen..</text></g><g><title>serialize (hyperframe/frame.py:147) (1 samples, 1.00%)</title><rect x="1154" y="212" width="12" height="15" fill="rgb(246,12,36)"/><text x="1157.00" y="222.50"></text></g><g><title>all (100 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(246,143,18)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (run.py:28) (100 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(236,51,37)"/><text x="13.00" y="62.50">&lt;module&gt; (run.py:28)</text></g><g><title>main (run.py:22) (100 samples, 100.00%)</title><rect x="10" y="68" width="1180" height="15" fill="rgb(247,168,23)"/><text x="13.00" y="78.50">main (run.py:22)</text></g><g><title>run (levin/app.py:39) (100 samples, 100.00%)</title><rect x="10" y="84" width="1180" height="15" fill="rgb(218,39,54)"/><text x="13.00" y="94.50">run (levin/app.py:39)</text></g><g><title>run (asyncio/runners.py:43) (100 samples, 100.00%)</title><rect x="10" y="100" width="1180" height="15" fill="rgb(206,136,45)"/><text x="13.00" y="110.50">run (asyncio/runners.py:43)</text></g><g><title>data_received (levin/connection.py:36) (2 samples, 2.00%)</title><rect x="1166" y="116" width="24" height="15" fill="rgb(225,151,35)"/><text x="1169.00" y="126.50">d..</text></g></g></svg>